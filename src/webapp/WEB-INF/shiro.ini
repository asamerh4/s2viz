[main]

authc.loginUrl = /login.html
authc.successUrl = /ips/app

cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

# Define the AUTHENTICATION realm (=check if user exists in LDAP)
ldapUserIDRealm = enmap.rest.raml.handler.EnmapJndiLdapRealm
ldapUserIDRealm.userDnTemplate = cn={0},ou=IPS-Users,ou=EnMAP-IPS,ou=EOC,dc=dlr,dc=de
ldapUserIDRealm.contextFactory.url = ldap://localhost:389
ldapUserIDRealm.contextFactory.authenticationMechanism = SIMPLE

# DEPRECATED BLOCK

# Define the AUTHORIZATION realm (=check associated roles/categories from postgres DB)
#jdbcRealm = enmap.rest.raml.handler.ShiroJdbcRealm
#jdbcRealm.permissionsLookupEnabled=false

#dataSource = org.postgresql.ds.PGSimpleDataSource
#dataSource.serverName = localhost
#dataSource.portNumber = 5432
#dataSource.databaseName = apidb
#dataSource.user = postgres
#dataSource.password = postgres
#jdbcRealm.dataSource = $dataSource
#jdbcRealm.userRolesQuery = select (select usercategory from ips.user_category where id = usercat_id)  from ips.user_cat_assignment where userkey = ?


[urls]
/favicon.ico = noSessionCreation, anon
#landing page
/index.html = anon
/ips/assets/images/* = anon
/login.html = authc
#protected app
/ips/** = authc
/api/** = authc




######################
# TEST FEATURE SECTION
#/swt/** = anon
# END - TEST FEATURE SECTION
#/api/** = noSessionCreation, authcBasic
#/login.html = authc
#/logout = logout
